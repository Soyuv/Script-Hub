-- Ultimate Admin Panel v0.2.3.9
-- Enhanced Aimbot, Movement, ESP, and more

local Version = "0.2.3.9"
local LatestVersion = "0.2.3.9"

-- Version check
if Version ~= LatestVersion then
    game:GetService("Players").LocalPlayer:Kick("Update to v"..LatestVersion.." required")
    return
end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- Character setup
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- Auto-update character references
LocalPlayer.CharacterAdded:Connect(function(newChar)
    Character = newChar
    Humanoid = newChar:WaitForChild("Humanoid")
    RootPart = newChar:WaitForChild("HumanoidRootPart")
end)

-- Anti-detection
pcall(function() game:GetService("ScriptContext").ScriptsDisabled = false end)
local oldNamecall; oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if method:lower() == "kick" then return nil end
    return oldNamecall(self, ...)
end)

-- Admin states
local Admin = {
    WalkSpeed = {
        Enabled = false,
        Value = 16,
        Max = 100,
        Min = 16
    },
    JumpPower = {
        Enabled = false,
        Value = 50,
        Max = 200,
        Min = 50
    },
    ESP = {
        Enabled = false,
        Players = {},
        ShowInfo = true,
        ShowHealth = true,
        ShowDistance = true,
        ShowLine = true,
        TeamCheck = false,
        Color = Color3.fromRGB(255, 50, 50)
    },
    Aimbot = {
        Enabled = false,
        FOV = 100,
        Smoothness = 0.2,
        TargetPart = "Head",
        TeamCheck = false,
        VisibleCheck = true,
        TriggerKey = Enum.KeyCode.Q,
        TriggerBot = false,
        Prediction = 0.1,
        Target = nil,
        FOVCircle = nil
    },
    Noclip = {
        Enabled = false
    }
}

-- Movement functions
local function UpdateMovement()
    if Admin.WalkSpeed.Enabled then
        Humanoid.WalkSpeed = Admin.WalkSpeed.Value
    else
        Humanoid.WalkSpeed = 16
    end
    
    if Admin.JumpPower.Enabled then
        Humanoid.JumpPower = Admin.JumpPower.Value
    else
        Humanoid.JumpPower = 50
    end
end

-- ESP functions
local function CreateESP(player)
    if Admin.ESP.Players[player] then return end
    
    Admin.ESP.Players[player] = {
        Highlight = Instance.new("Highlight"),
        Billboard = Instance.new("BillboardGui"),
        NameLabel = Instance.new("TextLabel"),
        HealthLabel = Instance.new("TextLabel"),
        DistanceLabel = Instance.new("TextLabel"),
        Line = Instance.new("LineHandleAdornment")
    }
    
    local esp = Admin.ESP.Players[player]
    
    -- Highlight setup
    esp.Highlight.FillColor = Admin.ESP.Color
    esp.Highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    esp.Highlight.FillTransparency = 0.5
    esp.Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    
    -- Billboard setup
    esp.Billboard.Size = UDim2.new(0, 200, 0, 100)
    esp.Billboard.StudsOffset = Vector3.new(0, 2, 0)
    esp.Billboard.AlwaysOnTop = true
    esp.Billboard.MaxDistance = 1000
    
    -- Name label
    esp.NameLabel.Size = UDim2.new(1, 0, 0.3, 0)
    esp.NameLabel.Position = UDim2.new(0, 0, 0, 0)
    esp.NameLabel.Text = player.Name
    esp.NameLabel.TextColor3 = Color3.new(1, 1, 1)
    esp.NameLabel.BackgroundTransparency = 1
    esp.NameLabel.Font = Enum.Font.GothamBold
    esp.NameLabel.TextSize = 14
    esp.NameLabel.Parent = esp.Billboard
    
    -- Health label
    esp.HealthLabel.Size = UDim2.new(1, 0, 0.3, 0)
    esp.HealthLabel.Position = UDim2.new(0, 0, 0.3, 0)
    esp.HealthLabel.TextColor3 = Color3.new(1, 1, 1)
    esp.HealthLabel.BackgroundTransparency = 1
    esp.HealthLabel.Font = Enum.Font.GothamMedium
    esp.HealthLabel.TextSize = 12
    esp.HealthLabel.Parent = esp.Billboard
    
    -- Distance label
    esp.DistanceLabel.Size = UDim2.new(1, 0, 0.3, 0)
    esp.DistanceLabel.Position = UDim2.new(0, 0, 0.6, 0)
    esp.DistanceLabel.TextColor3 = Color3.new(1, 1, 1)
    esp.DistanceLabel.BackgroundTransparency = 1
    esp.DistanceLabel.Font = Enum.Font.GothamMedium
    esp.DistanceLabel.TextSize = 12
    esp.DistanceLabel.Parent = esp.Billboard
    
    -- Line setup
    esp.Line.Thickness = 1
    esp.Line.Color3 = Admin.ESP.Color
    esp.Line.Transparency = 0.7
    esp.Line.Parent = workspace.Terrain
end

local function UpdateESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local char = player.Character
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            local root = char:FindFirstChild("HumanoidRootPart")
            
            -- Team check
            local sameTeam = false
            if Admin.ESP.TeamCheck and player.Team and LocalPlayer.Team then
                sameTeam = player.Team == LocalPlayer.Team
            end
            
            if not sameTeam then
                if not Admin.ESP.Players[player] then
                    CreateESP(player)
                end
                
                local esp = Admin.ESP.Players[player]
                
                -- Update highlight
                esp.Highlight.Enabled = Admin.ESP.Enabled
                esp.Highlight.Parent = Admin.ESP.Enabled and char or nil
                
                -- Update info
                esp.Billboard.Enabled = Admin.ESP.Enabled and Admin.ESP.ShowInfo
                esp.Billboard.Parent = (Admin.ESP.Enabled and Admin.ESP.ShowInfo) and char or nil
                
                -- Update line
                esp.Line.Visible = Admin.ESP.Enabled and Admin.ESP.ShowLine
                
                if root and Admin.ESP.Enabled then
                    -- Update line
                    if Admin.ESP.ShowLine then
                        esp.Line.Adornee = root
                        esp.Line.Length = (root.Position - RootPart.Position).Magnitude
                        esp.Line.CFrame = CFrame.new(root.Position, RootPart.Position)
                    end
                    
                    -- Update info
                    if Admin.ESP.ShowInfo and humanoid then
                        esp.HealthLabel.Text = string.format("HP: %d/%d", math.floor(humanoid.Health), math.floor(humanoid.MaxHealth))
                        esp.DistanceLabel.Text = string.format("%d studs", math.floor((root.Position - RootPart.Position).Magnitude))
                        
                        -- Color based on health
                        local healthPercent = humanoid.Health / humanoid.MaxHealth
                        esp.HealthLabel.TextColor3 = Color3.new(1, healthPercent, healthPercent)
                    end
                end
            elseif Admin.ESP.Players[player] then
                -- Clean up if team check fails
                for _, obj in pairs(Admin.ESP.Players[player]) do
                    if typeof(obj) == "Instance" then
                        obj:Destroy()
                    end
                end
                Admin.ESP.Players[player] = nil
            end
        elseif Admin.ESP.Players[player] then
            -- Clean up if character doesn't exist
            for _, obj in pairs(Admin.ESP.Players[player]) do
                if typeof(obj) == "Instance" then
                    obj:Destroy()
                end
            end
            Admin.ESP.Players[player] = nil
        end
    end
end

-- Aimbot functions
local function CreateFOVCircle()
    if Admin.Aimbot.FOVCircle then return end
    
    Admin.Aimbot.FOVCircle = Drawing.new("Circle")
    Admin.Aimbot.FOVCircle.Visible = false
    Admin.Aimbot.FOVCircle.Thickness = 1
    Admin.Aimbot.FOVCircle.Color = Color3.fromRGB(255, 255, 255)
    Admin.Aimbot.FOVCircle.Transparency = 0.7
    Admin.Aimbot.FOVCircle.Filled = false
end

local function UpdateFOVCircle()
    if not Admin.Aimbot.FOVCircle then return end
    
    Admin.Aimbot.FOVCircle.Visible = Admin.Aimbot.Enabled
    Admin.Aimbot.FOVCircle.Radius = Admin.Aimbot.FOV
    Admin.Aimbot.FOVCircle.Position = UserInputService:GetMouseLocation()
end

local function FindTarget()
    local closest = nil
    local closestDist = math.huge
    local fov = Admin.Aimbot.FOV
    local mousePos = UserInputService:GetMouseLocation()
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            -- Team check
            local sameTeam = false
            if Admin.Aimbot.TeamCheck and player.Team and LocalPlayer.Team then
                sameTeam = player.Team == LocalPlayer.Team
            end
            
            if not sameTeam then
                local part = player.Character:FindFirstChild(Admin.Aimbot.TargetPart) or player.Character:FindFirstChild("HumanoidRootPart")
                if part then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                    if onScreen then
                        -- Visibility check
                        local visible = true
                        if Admin.Aimbot.VisibleCheck then
                            local params = RaycastParams.new()
                            params.FilterDescendantsInstances = {Character, player.Character}
                            params.FilterType = Enum.RaycastFilterType.Blacklist
                            local ray = workspace:Raycast(
                                Camera.CFrame.Position,
                                (part.Position - Camera.CFrame.Position).Unit * 1000,
                                params
                            )
                            visible = ray and ray.Instance:IsDescendantOf(player.Character)
                        end
                        
                        if visible then
                            local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mousePos.X, mousePos.Y)).Magnitude
                            if dist < fov and dist < closestDist then
                                closest = player
                                closestDist = dist
                            end
                        end
                    end
                end
            end
        end
    end
    
    Admin.Aimbot.Target = closest
    return closest
end

local function AimAt(target)
    if not target or not target.Character then return end
    
    local part = target.Character:FindFirstChild(Admin.Aimbot.TargetPart) or target.Character:FindFirstChild("HumanoidRootPart")
    if not part then return end
    
    -- Calculate predicted position
    local predictedPosition = part.Position
    if Admin.Aimbot.Prediction > 0 then
        local humanoid = target.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local velocity = part.AssemblyLinearVelocity
            predictedPosition = predictedPosition + (velocity * Admin.Aimbot.Prediction)
        end
    end
    
    -- Smooth aiming
    local current = Camera.CFrame
    local targetCFrame = CFrame.lookAt(current.Position, predictedPosition)
    Camera.CFrame = current:Lerp(targetCFrame, Admin.Aimbot.Smoothness)
end

-- Noclip function
local function UpdateNoclip()
    if not Character then return end
    
    for _, part in pairs(Character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not Admin.Noclip.Enabled
        end
    end
end

-- Main loop
RunService.Heartbeat:Connect(function()
    -- Update movement
    UpdateMovement()
    
    -- Update ESP
    UpdateESP()
    
    -- Update FOV circle
    UpdateFOVCircle()
    
    -- Update noclip
    UpdateNoclip()
    
    -- Aimbot
    if Admin.Aimbot.Enabled then
        if Admin.Aimbot.TriggerBot and UserInputService:IsKeyDown(Admin.Aimbot.TriggerKey) then
            local target = FindTarget()
            if target then
                AimAt(target)
            end
        elseif not Admin.Aimbot.TriggerBot then
            local target = FindTarget()
            if target then
                AimAt(target)
            end
        end
    end
end)

-- GUI Creation
local GUI = Instance.new("ScreenGui")
GUI.Name = "UltimateAdminPanel"
GUI.Parent = game:GetService("CoreGui")

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0.35, 0, 0.7, 0)
MainFrame.Position = UDim2.new(0.325, 0, 0.15, 0)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = GUI

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Text = "Ultimate Admin Panel v"..Version
Title.Size = UDim2.new(1, 0, 0, 30)
Title.Font = Enum.Font.GothamBold
Title.TextColor3 = Color3.new(1, 1, 1)
Title.BackgroundTransparency = 1
Title.Parent = MainFrame

local CloseButton = Instance.new("TextButton")
CloseButton.Text = "X"
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -35, 0, 0)
CloseButton.Parent = MainFrame
CloseButton.MouseButton1Click:Connect(function()
    GUI.Enabled = not GUI.Enabled
end)

local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Size = UDim2.new(1, 0, 1, -40)
ScrollingFrame.Position = UDim2.new(0, 0, 0, 40)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.ScrollBarThickness = 8
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 3, 0)
ScrollingFrame.Parent = MainFrame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.Parent = ScrollingFrame

-- Control Creation Function
local function CreateControl(parent, label, controlType, callback, extraParams)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, -20, 0, extraParams and extraParams.height or 50)
    Container.BackgroundTransparency = 1
    Container.Parent = parent

    local Label = Instance.new("TextLabel")
    Label.Text = label
    Label.Size = UDim2.new(1, 0, 0, 20)
    Label.TextColor3 = Color3.new(1, 1, 1)
    Label.BackgroundTransparency = 1
    Label.Font = Enum.Font.GothamMedium
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container

    if controlType == "toggle" then
        local Toggle = Instance.new("TextButton")
        Toggle.Text = extraParams and extraParams.default and "ON" or "OFF"
        Toggle.Size = UDim2.new(0.25, 0, 0, 30)
        Toggle.Position = UDim2.new(0.75, 0, 0, 20)
        Toggle.TextColor3 = Color3.new(1, 1, 1)
        Toggle.BackgroundColor3 = extraParams and extraParams.default and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
        Toggle.Parent = Container
        
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 4)
        UICorner.Parent = Toggle
        
        Toggle.MouseButton1Click:Connect(function()
            local newState = Toggle.Text == "OFF"
            Toggle.Text = newState and "ON" or "OFF"
            Toggle.BackgroundColor3 = newState and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
            callback(newState)
        end)
    elseif controlType == "slider" then
        local Slider = Instance.new("TextBox")
        Slider.Size = UDim2.new(0.5, 0, 0, 30)
        Slider.Position = UDim2.new(0, 0, 0, 20)
        Slider.Text = tostring(extraParams and extraParams.default or 0)
        Slider.PlaceholderText = extraParams and extraParams.placeholder or ""
        Slider.Parent = Container
        
        local Button = Instance.new("TextButton")
        Button.Text = "SET"
        Button.Size = UDim2.new(0.25, 0, 0, 30)
        Button.Position = UDim2.new(0.75, 0, 0, 20)
        Button.Parent = Container
        Button.MouseButton1Click:Connect(function()
            callback(tonumber(Slider.Text) or 0)
        end)
    elseif controlType == "dropdown" then
        local Dropdown = Instance.new("TextButton")
        Dropdown.Size = UDim2.new(0.75, 0, 0, 30)
        Dropdown.Position = UDim2.new(0, 0, 0, 20)
        Dropdown.Text = extraParams and extraParams.default or "SELECT"
        Dropdown.TextColor3 = Color3.new(1, 1, 1)
        Dropdown.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        Dropdown.Parent = Container
        
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 4)
        UICorner.Parent = Dropdown
        
        local OptionsFrame = Instance.new("Frame")
        OptionsFrame.Size = UDim2.new(0.75, 0, 0, 0)
        OptionsFrame.Position = UDim2.new(0, 0, 0, 50)
        OptionsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
        OptionsFrame.Visible = false
        OptionsFrame.Parent = Container
        
        local UICorner2 = Instance.new("UICorner")
        UICorner2.CornerRadius = UDim.new(0, 4)
        UICorner2.Parent = OptionsFrame
        
        local OptionsList = Instance.new("UIListLayout")
        OptionsList.Parent = OptionsFrame
        
        for _, option in pairs(extraParams and extraParams.options or {}) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Size = UDim2.new(1, 0, 0, 30)
            OptionButton.Text = option
            OptionButton.TextColor3 = Color3.new(1, 1, 1)
            OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
            OptionButton.Parent = OptionsFrame
            
            OptionButton.MouseButton1Click:Connect(function()
                Dropdown.Text = option
                callback(option)
                OptionsFrame.Visible = false
            end)
        end
        
        Dropdown.MouseButton1Click:Connect(function()
            OptionsFrame.Visible = not OptionsFrame.Visible
            OptionsFrame.Size = UDim2.new(0.75, 0, 0, #OptionsFrame:GetChildren() * 30 - 1)
        end)
    elseif controlType == "keybind" then
        local Keybind = Instance.new("TextButton")
        Keybind.Size = UDim2.new(0.5, 0, 0, 30)
        Keybind.Position = UDim2.new(0, 0, 0, 20)
        Keybind.Text = extraParams and extraParams.default and tostring(extraParams.default) or "NONE"
        Keybind.TextColor3 = Color3.new(1, 1, 1)
        Keybind.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        Keybind.Parent = Container
        
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 4)
        UICorner.Parent = Keybind
        
        Keybind.MouseButton1Click:Connect(function()
            Keybind.Text = "..."
            local input = UserInputService.InputBegan:Wait()
            if input.UserInputType == Enum.UserInputType.Keyboard then
                Keybind.Text = tostring(input.KeyCode)
                callback(input.KeyCode)
            end
        end)
    end
end

-- Movement Section
local MovementSection = Instance.new("TextLabel")
MovementSection.Text = "MOVEMENT"
MovementSection.Size = UDim2.new(1, 0, 0, 25)
MovementSection.TextColor3 = Color3.new(0.8, 0.8, 1)
MovementSection.BackgroundTransparency = 1
MovementSection.Font = Enum.Font.GothamBold
MovementSection.TextXAlignment = Enum.TextXAlignment.Left
MovementSection.Parent = ScrollingFrame

CreateControl(ScrollingFrame, "Walk Speed", "slider", function(value)
    Admin.WalkSpeed.Value = math.clamp(value, Admin.WalkSpeed.Min, Admin.WalkSpeed.Max)
    if Admin.WalkSpeed.Enabled then
        Humanoid.WalkSpeed = Admin.WalkSpeed.Value
    end
end, {default = 16, placeholder = "16-100"})

CreateControl(ScrollingFrame, "Toggle WalkSpeed", "toggle", function(state)
    Admin.WalkSpeed.Enabled = state
    UpdateMovement()
end)

CreateControl(ScrollingFrame, "Jump Power", "slider", function(value)
    Admin.JumpPower.Value = math.clamp(value, Admin.JumpPower.Min, Admin.JumpPower.Max)
    if Admin.JumpPower.Enabled then
        Humanoid.JumpPower = Admin.JumpPower.Value
    end
end, {default = 50, placeholder = "50-200"})

CreateControl(ScrollingFrame, "Toggle JumpPower", "toggle", function(state)
    Admin.JumpPower.Enabled = state
    UpdateMovement()
end)

CreateControl(ScrollingFrame, "Toggle Noclip", "toggle", function(state)
    Admin.Noclip.Enabled = state
end)

-- ESP Section
local ESPSection = Instance.new("TextLabel")
ESPSection.Text = "ESP"
ESPSection.Size = UDim2.new(1, 0, 0, 25)
ESPSection.TextColor3 = Color3.new(0.8, 0.8, 1)
ESPSection.BackgroundTransparency = 1
ESPSection.Font = Enum.Font.GothamBold

ESPSection.TextXAlignment = Enum.TextXAlignment.Left
ESPSection.Parent = ScrollingFrame

CreateControl(ScrollingFrame, "Toggle ESP", "toggle", function(state)
    Admin.ESP.Enabled = state
end)

CreateControl(ScrollingFrame, "Show Info", "toggle", function(state)
    Admin.ESP.ShowInfo = state
end, {default = true})

CreateControl(ScrollingFrame, "Show Health", "toggle", function(state)
    Admin.ESP.ShowHealth = state
end, {default = true})

CreateControl(ScrollingFrame, "Show Distance", "toggle", function(state)
    Admin.ESP.ShowDistance = state
end, {default = true})

CreateControl(ScrollingFrame, "Show Line", "toggle", function(state)
    Admin.ESP.ShowLine = state
end, {default = true})

CreateControl(ScrollingFrame, "Team Check", "toggle", function(state)
    Admin.ESP.TeamCheck = state
end)

-- Aimbot Section
local AimbotSection = Instance.new("TextLabel")
AimbotSection.Text = "AIMBOT"
AimbotSection.Size = UDim2.new(1, 0, 0, 25)
AimbotSection.TextColor3 = Color3.new(0.8, 0.8, 1)
AimbotSection.BackgroundTransparency = 1
AimbotSection.Font = Enum.Font.GothamBold
AimbotSection.TextXAlignment = Enum.TextXAlignment.Left
AimbotSection.Parent = ScrollingFrame

CreateControl(ScrollingFrame, "Toggle Aimbot", "toggle", function(state)
    Admin.Aimbot.Enabled = state
    CreateFOVCircle()
end)

CreateControl(ScrollingFrame, "Target Part", "dropdown", function(part)
    Admin.Aimbot.TargetPart = part
end, {default = "Head", options = {"Head", "HumanoidRootPart", "UpperTorso"}})

CreateControl(ScrollingFrame, "FOV Size", "slider", function(value)
    Admin.Aimbot.FOV = value
end, {default = 100, placeholder = "50-500"})

CreateControl(ScrollingFrame, "Smoothness", "slider", function(value)
    Admin.Aimbot.Smoothness = math.clamp(value, 0.01, 1)
end, {default = 0.2, placeholder = "0.01-1"})

CreateControl(ScrollingFrame, "Prediction", "slider", function(value)
    Admin.Aimbot.Prediction = math.clamp(value, 0, 0.5)
end, {default = 0.1, placeholder = "0-0.5"})

CreateControl(ScrollingFrame, "Team Check", "toggle", function(state)
    Admin.Aimbot.TeamCheck = state
end)

CreateControl(ScrollingFrame, "Visible Check", "toggle", function(state)
    Admin.Aimbot.VisibleCheck = state
end, {default = true})

CreateControl(ScrollingFrame, "Trigger Key", "keybind", function(key)
    Admin.Aimbot.TriggerKey = key
end, {default = Enum.KeyCode.Q})

CreateControl(ScrollingFrame, "Trigger Bot", "toggle", function(state)
    Admin.Aimbot.TriggerBot = state
end)

-- Toggle Button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Text = "ADMIN"
ToggleButton.Size = UDim2.new(0, 100, 0, 40)
ToggleButton.Position = UDim2.new(0, 10, 0.9, -50)
ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
ToggleButton.TextColor3 = Color3.new(1, 1, 1)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 16
ToggleButton.Parent = GUI

local UICorner2 = Instance.new("UICorner")
UICorner2.CornerRadius = UDim.new(0, 8)
UICorner2.Parent = ToggleButton

ToggleButton.MouseButton1Click:Connect(function()
    GUI.Enabled = not GUI.Enabled
end)

-- Mobile detection and adjustments
if UserInputService.TouchEnabled then
    ToggleButton.Size = UDim2.new(0, 120, 0, 50)
    ToggleButton.TextSize = 18
    MainFrame.Size = UDim2.new(0.8, 0, 0.8, 0)
    MainFrame.Position = UDim2.new(0.1, 0, 0.1, 0)
end

-- Auto-close when character dies
Humanoid.Died:Connect(function()
    GUI.Enabled = false
end)

-- Initialize FOV circle
CreateFOVCircle()

-- Clean up on script termination
game:GetService("Players").PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        for _, playerESP in pairs(Admin.ESP.Players) do
            for _, obj in pairs(playerESP) do
                if typeof(obj) == "Instance" then
                    obj:Destroy()
                end
            end
        end
        if Admin.Aimbot.FOVCircle then
            Admin.Aimbot.FOVCircle:Remove()
        end
        GUI:Destroy()
    end
end)
