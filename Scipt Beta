-- Ultimate Client-Sided Admin Panel + Advanced Anti-Cheat Bypass (Full, Combined, and Robust)
-- Key: "Test"
-- This script is for educational, testing, or exploit scenarios only.

-- =========================
-- ======= SERVICES ========
-- =========================
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")
local VirtualUser = game:GetService("VirtualUser")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = Workspace.CurrentCamera

-- =========================
-- ====== BYPASS CODE ======
-- =========================

-- Utility: Suspicious script check (centralized)
local function is_suspicious_script()
    local sn = tostring(getcallingscript())
    return sn:find("?") or sn:lower():find("anti") or sn:lower():find("cheat")
end

-- Decoy/Junk code for bloat, "performance" and analytics stubs
local _scriptUptime = 0
task.spawn(function()
    while true do
        _scriptUptime = _scriptUptime + 1
        task.wait(1)
    end
end)

local fpsLog = {}
task.spawn(function()
    while true do
        table.insert(fpsLog, math.random(50, 61))
        if #fpsLog > 100 then table.remove(fpsLog, 1) end
        task.wait(0.5)
    end
end)

local perfMonitor = {}
function perfMonitor:LogMemory()
    return math.random(1e7, 5e7)
end
function perfMonitor:LogCPU()
    return math.random()
end

math.randomseed(os.time())
for _ = 1, math.random(1, 5) do math.random() end

local function noop(...) return ... end

local analyticsCollector = {}
function analyticsCollector:SendEvent(event)
    return math.random()
end

-- Core: Hook tick to stall anti-cheat
local function hookTick()
    local orig_tick
    orig_tick = hookfunction(getrenv().tick, function(...)
        if not checkcaller() and is_suspicious_script() then
            return coroutine.yield()
        end
        return orig_tick(...)
    end)
end
hookTick()

-- Core: Hook gcinfo to spoof memory check
local function hookGCInfo()
    local orig_gcinfo
    orig_gcinfo = hookfunction(gcinfo, function(...)
        if is_suspicious_script() then
            return orig_gcinfo(...) + math.random(500, 10000)
        end
        return orig_gcinfo(...)
    end)
end
hookGCInfo()

-- Core: Disable ScriptContext error listeners
local function disableScriptErrorListeners()
    local ScriptContext = cloneref(game:GetService("ScriptContext"))
    for _, conn in ipairs(getconnections(ScriptContext.Error)) do
        pcall(function() conn:Disable() end)
    end
end
disableScriptErrorListeners()

-- Core: Property spoofing for WalkSpeed and CanCollide
local function setupPropertySpoofing()
    task.spawn(function()
        local Players = cloneref(game:GetService("Players"))
        local Data = {}

        local lp = Players.LocalPlayer
        if not lp.Character then
            lp.CharacterAdded:Wait()
            task.wait(1)
        end

        for _, part in ipairs(lp.Character:GetDescendants()) do
            pcall(function()
                Data[tostring(part)] = part.CanCollide
            end)
        end

        local orig_index
        orig_index = hookmetamethod(game, "__index", function(self, idx)
            if checkcaller() then
                return orig_index(self, idx)
            end
            if tostring(self) == "Humanoid" and idx == "WalkSpeed" then
                return 10
            end
            if Data[tostring(self)] ~= nil and idx == "CanCollide" then
                return Data[tostring(self)]
            end
            return orig_index(self, idx)
        end)
    end)
end
setupPropertySpoofing()

-- Extra Decoy: Network monitor stub
local function fakeNetworkMonitor()
    for i = 1, 10 do
        task.wait(math.random())
        noop("Network packet " .. tostring(math.random(10000,99999)))
    end
end
fakeNetworkMonitor()

-- Extra Decoy: Periodic analytics
task.spawn(function()
    while true do
        analyticsCollector:SendEvent(tostring(math.random(100000,999999)))
        task.wait(math.random(5, 15))
    end
end)

-- Extra Decoy: Fake cleanup
local function fakeCleanup()
    for i = 1, math.random(1, 10) do
        noop("Cleanup_" .. tostring(i))
    end
end
fakeCleanup()

getgenv().AntiCheatBypass = true
repeat task.wait() until getgenv().AntiCheatBypass == true
print("Anti-Cheat Bypass loaded. Uptime:", _scriptUptime, "s | Mem:", perfMonitor:LogMemory(), "FPS:", fpsLog[#fpsLog] or 0)

-- =========================
-- ====== UI SECTION =======
-- =========================

-- Robust Rayfield loader (extra safe)
local function safeLoad(url)
    local success, lib = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    if success and type(lib) == "table" and lib.CreateWindow then
        return lib
    end
    return nil
end

local Rayfield = safeLoad("https://raw.githubusercontent.com/shlexware/Rayfield/main/source") or safeLoad("https://sirius.menu/rayfield")
if not Rayfield then
    LocalPlayer:Kick("Failed to load UI library.")
    return
end

-- Key System
local function CheckKey()
    local verified = false
    local win = Rayfield:CreateWindow({
        Name = "Key Verification",
        LoadingTitle = "Client Admin Panel",
        LoadingSubtitle = "Enter your key",
        ConfigurationSaving = { Enabled = false },
        Discord = { Enabled = false },
        KeySystem = false
    })
    local tab = win:CreateTab("Key")
    tab:CreateInput({
        Name = "Enter Key",
        PlaceholderText = "Enter 'Test'",
        Callback = function(key)
            if key == "Test" then
                verified = true
                win:Destroy()
            else
                Rayfield:Notify({ Title = "Invalid", Content = "Incorrect key. Try again." })
            end
        end
    })
    repeat task.wait() until verified
end
CheckKey()

-- Anti-AFK
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- Main UI
local Window = Rayfield:CreateWindow({
    Name = "Ultimate Client Admin Panel",
    LoadingTitle = "Initializing...",
    LoadingSubtitle = "Client-Sided",
    ConfigurationSaving = { Enabled = false },
    Discord = { Enabled = false },
    KeySystem = false
})

-- Tabs
local PlayerTab = Window:CreateTab("Player")
local VisualTab = Window:CreateTab("Visuals")
local CombatTab = Window:CreateTab("Combat")
local UtilityTab = Window:CreateTab("Utilities")
local FunTab = Window:CreateTab("Fun")
local ExecutorTab = Window:CreateTab("Executor")

-- Variables
local FlyEnabled = false
local FlySpeed = 100
local InfiniteJump = false
local NoClip = false
local TPToPlayerName = ""
local ESPEnabled = false
local ESPBoxes = {}
local AimbotEnabled = false

-- Helper
local function GetHumanoid()
    return LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
end

local function ClearESP()
    for _, box in pairs(ESPBoxes) do
        if box.Remove then
            box:Remove()
        end
    end
    ESPBoxes = {}
end

-- WalkSpeed & JumpPower
PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 500},
    Increment = 1,
    CurrentValue = 16,
    Callback = function(val)
        local h = GetHumanoid()
        if h then
            h.WalkSpeed = val
        end
    end
})

PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 300},
    Increment = 1,
    CurrentValue = 50,
    Callback = function(val)
        local h = GetHumanoid()
        if h then
            h.JumpPower = val
        end
    end
})

-- Infinite Jump
PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(state)
        InfiniteJump = state
    end
})
UserInputService.JumpRequest:Connect(function()
    if InfiniteJump and GetHumanoid() then
        GetHumanoid():ChangeState("Jumping")
    end
end)

-- Fly
local flyConnection
PlayerTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(state)
        FlyEnabled = state
        if state then
            local hrp = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
            local bv = Instance.new("BodyVelocity", hrp)
            local bg = Instance.new("BodyGyro", hrp)
            bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)
            bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)

            flyConnection = RunService.Heartbeat:Connect(function()
                if not FlyEnabled then
                    bv:Destroy()
                    bg:Destroy()
                    if flyConnection then
                        flyConnection:Disconnect()
                    end
                    return
                end
                local move = Vector3.zero
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    move = move + Camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    move = move - Camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    move = move - Camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    move = move + Camera.CFrame.RightVector
                end
                bv.Velocity = move * FlySpeed
                bg.CFrame = Camera.CFrame
            end)
        end
    end
})

PlayerTab:CreateSlider({
    Name = "Fly Speed",
    Range = {50, 300},
    Increment = 10,
    CurrentValue = FlySpeed,
    Callback = function(val)
        FlySpeed = val
    end
})

-- NoClip
local noClipConnection
PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Callback = function(state)
        NoClip = state
    end
})
noClipConnection = RunService.Stepped:Connect(function()
    if NoClip and LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end)

-- Teleport to Position (CFrame)
PlayerTab:CreateInput({
    Name = "Teleport to CFrame",
    PlaceholderText = "x,y,z",
    Callback = function(input)
        local parts = string.split(input, ",")
        if #parts == 3 then
            local x, y, z = tonumber(parts[1]), tonumber(parts[2]), tonumber(parts[3])
            if x and y and z then
                local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    hrp.CFrame = CFrame.new(x, y, z)
                end
            end
        end
    end
})

-- Teleport to Player
PlayerTab:CreateInput({
    Name = "Teleport to Player",
    PlaceholderText = "Enter player name",
    Callback = function(name)
        TPToPlayerName = name
        local target = Players:FindFirstChild(name)
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = target.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
            end
        end
    end
})

-- ESP
VisualTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Callback = function(state)
        ESPEnabled = state
        if not state then
            ClearESP()
        end
    end
})
RunService.RenderStepped:Connect(function()
    if ESPEnabled then
        ClearESP()
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer and plr.Character then
                local head = plr.Character:FindFirstChild("Head")
                if head then
                    local pos, onScreen = Camera:WorldToViewportPoint(head.Position)
                    if onScreen then
                        local box = Drawing.new("Text")
                        box.Text = plr.Name
                        box.Size = 18
                        box.Center = true
                        box.Outline = true
                        box.Color = Color3.new(1, 0, 0)
                        box.Position = Vector2.new(pos.X, pos.Y - 30)
                        box.Visible = true
                        table.insert(ESPBoxes, box)
                    end
                end
            end
        end
    end
end)

-- Fullbright
VisualTab:CreateButton({
    Name = "Enable Fullbright",
    Callback = function()
        Lighting.Ambient = Color3.new(1, 1, 1)
        Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
        Lighting.Brightness = 5
    end
})

-- X-Ray
VisualTab:CreateButton({
    Name = "Enable X-Ray (local)",
    Callback = function()
        for _, part in ipairs(Workspace:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0.5
                part.Material = Enum.Material.ForceField
            end
        end
    end
})

-- FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Radius = 100
FOVCircle.Thickness = 1
FOVCircle.NumSides = 64
FOVCircle.Transparency = 1
FOVCircle.Filled = false
FOVCircle.Visible = true
FOVCircle.Color = Color3.fromRGB(0, 255, 0)
RunService.RenderStepped:Connect(function()
    local mousePos = UserInputService:GetMouseLocation()
    FOVCircle.Position = Vector2.new(mousePos.X, mousePos.Y)
end)

-- Aimbot
CombatTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Callback = function(val)
        AimbotEnabled = val
    end
})
local function updateAimbot()
    if not AimbotEnabled then
        return
    end
    local closest, shortest = nil, math.huge
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character then
            local head = plr.Character:FindFirstChild("Head")
            if head then
                local pos, onScreen = Camera:WorldToViewportPoint(head.Position)
                if onScreen then
                    local dist = (Vector2.new(pos.X, pos.Y) - UserInputService:GetMouseLocation()).Magnitude
                    if dist < shortest and dist < FOVCircle.Radius then
                        closest, shortest = plr, dist
                    end
                end
            end
        end
    end
    if closest and closest.Character then
        local head = closest.Character:FindFirstChild("Head")
        if head then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, head.Position)
        end
    end
end
RunService:BindToRenderStep("Aimbot", Enum.RenderPriority.Camera.Value, updateAimbot)

-- Tool Giver
UtilityTab:CreateInput({
    Name = "Tool Giver (Asset ID or Backpack Name)",
    PlaceholderText = "123456789 or ToolName",
    Callback = function(toolText)
        if tonumber(toolText) then
            local tool = game:GetObjects("rbxassetid://" .. toolText)[1]
            if tool and tool:IsA("Tool") then
                tool.Parent = LocalPlayer.Backpack
            end
        else
            local tool = LocalPlayer.Backpack:FindFirstChild(toolText)
            if tool then
                tool.Parent = LocalPlayer.Character
            end
        end
    end
})

-- Click Teleport
UtilityTab:CreateToggle({
    Name = "Click Teleport",
    CurrentValue = false,
    Callback = function(state)
        if state then
            Mouse.Button1Down:Connect(function()
                local target = Mouse.Hit
                if LocalPlayer.Character then
                    local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.CFrame = target + Vector3.new(0, 3, 0)
                    end
                end
            end)
        end
    end
})

-- Script Executor
ExecutorTab:CreateInput({
    Name = "Execute Lua Code",
    PlaceholderText = "loadstring(...)()",
    Callback = function(code)
        local success, err = pcall(function()
            loadstring(code)()
        end)
        if not success then
            Rayfield:Notify({ Title = "Error", Content = tostring(err) })
        end
    end
})
ExecutorTab:CreateInput({
    Name = "Load Script from URL",
    PlaceholderText = "Pastebin raw URL",
    Callback = function(url)
        local success, result = pcall(function()
            local script = game:HttpGet(url)
            loadstring(script)()
        end)
        if not success then
            Rayfield:Notify({ Title = "Error", Content = "Failed to load script." })
        end
    end
})

-- Rainbow Character
FunTab:CreateToggle({
    Name = "Rainbow Character",
    CurrentValue = false,
    Callback = function(state)
        task.spawn(function()
            while state do
                for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Color = Color3.fromHSV(tick() % 5 / 5, 1, 1)
                    end
                end
                task.wait(0.1)
            end
        end)
    end
})

-- Play Custom Sound
FunTab:CreateInput({
    Name = "Play Sound (ID)",
    PlaceholderText = "Enter Sound ID",
    Callback = function(id)
        local sound = Instance.new("Sound", Camera)
        sound.SoundId = "rbxassetid://" .. id
        sound.Volume = 5
        sound:Play()
        sound.Ended:Connect(function()
            sound:Destroy()
        end)
    end
})

-- Fake Chat
FunTab:CreateInput({
    Name = "Fake Chat",
    PlaceholderText = "Your message...",
    Callback = function(msg)
        local chatEvent = game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents")
        if chatEvent then
            chatEvent.SayMessageRequest:FireServer(msg, "All")
        else
            StarterGui:SetCore("ChatMakeSystemMessage", {
                Text = msg,
                Color = Color3.fromRGB(0, 255, 0),
                Font = Enum.Font.SourceSansBold,
                FontSize = Enum.FontSize.Size24
            })
        end
    end
})

-- Fake System Message
FunTab:CreateInput({
    Name = "Fake System Message",
    PlaceholderText = "Your system notice...",
    Callback = function(text)
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "[SYSTEM] " .. text,
            Color = Color3.fromRGB(255, 200, 0),
            Font = Enum.Font.SourceSansBold,
            FontSize = Enum.FontSize.Size24
        })
    end
})

-- UI Toggle Keybind
UtilityTab:CreateKeybind({
    Name = "Toggle GUI",
    CurrentKeybind = "RightControl",
    HoldToInteract = false,
    Callback = function()
        Rayfield:ToggleUI()
    end
})

-- Clean Up Option
UtilityTab:CreateButton({
    Name = "Unload All",
    Callback = function()
        Rayfield:Destroy()
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "[Admin Panel] Unloaded.",
            Color = Color3.fromRGB(255, 50, 50),
            Font = Enum.Font.SourceSansBold,
            FontSize = Enum.FontSize.Size24
        })
    end
})
