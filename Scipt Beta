-- KRNL/Delta Compatible Client Admin Panel + Stealth Anti-Cheat Bypass
-- Key: "Key"

-- SERVICES
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = Workspace.CurrentCamera

-- ===========================
--      BASIC ANTI-CHEAT BYPASS
-- ===========================

-- 1. Disable error listeners (works on most anti-cheats)
pcall(function()
    local ScriptContext = game:GetService("ScriptContext")
    for _, conn in ipairs(getconnections(ScriptContext.Error)) do
        conn:Disable()
    end
end)

-- 2. Disable "Touched" events on character parts
local function disconnectTouched(char)
    for _, v in ipairs(char:GetDescendants()) do
        if v:IsA("BasePart") then
            for _, conn in ipairs(getconnections(v.Touched)) do
                conn:Disable()
            end
        end
    end
end
if LocalPlayer.Character then disconnectTouched(LocalPlayer.Character) end
LocalPlayer.CharacterAdded:Connect(disconnectTouched)

-- 3. Disable anti-cheat RemoteEvents/RemoteFunctions (basic, works on most games with open ReplicatedStorage)
pcall(function()
    for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            if string.find(obj.Name:lower(), "anticheat") or string.find(obj.Name:lower(), "ac") then
                obj:Destroy()
            end
        end
    end
end)

-- 4. Spoof WalkSpeed/JumpPower (no hookfunction, just constantly set values)
local spoofedWalkSpeed, spoofedJumpPower = 16, 50
RunService.Heartbeat:Connect(function()
    local h = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if h then
        if h.WalkSpeed ~= spoofedWalkSpeed then h.WalkSpeed = spoofedWalkSpeed end
        if h.JumpPower ~= spoofedJumpPower then h.JumpPower = spoofedJumpPower end
    end
end)

-- 5. Anti-AFK
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- ===========================
--         RAYFIELD UI LOADER (KRNL/Delta Safe)
-- ===========================
local function safeLoad(url)
    local success, lib = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    if success and type(lib) == "table" and lib.CreateWindow then
        return lib
    end
    return nil
end

local Rayfield = safeLoad("https://raw.githubusercontent.com/shlexware/Rayfield/main/source")
    or safeLoad("https://sirius.menu/rayfield")
if not Rayfield then
    LocalPlayer:Kick("Failed to load UI library.")
    return
end

-- ===========================
--         KEY SYSTEM
-- ===========================
local function CheckKey()
    local verified = false
    local win = Rayfield:CreateWindow({
        Name = "Key Verification",
        LoadingTitle = "Client Admin Panel",
        LoadingSubtitle = "Enter your key",
        ConfigurationSaving = { Enabled = false },
        Discord = { Enabled = false },
        KeySystem = false
    })
    local tab = win:CreateTab("Key")
    tab:CreateInput({
        Name = "Enter Key",
        PlaceholderText = "Enter 'Test'",
        Callback = function(key)
            if key == "Test" then
                verified = true
                win:Destroy()
            else
                Rayfield:Notify({ Title = "Invalid", Content = "Incorrect key. Try again." })
            end
        end
    })
    repeat task.wait() until verified
end
CheckKey()

-- ===========================
--         MAIN UI & FEATURES
-- ===========================
local Window = Rayfield:CreateWindow({
    Name = "Ultimate Client Admin Panel",
    LoadingTitle = "Initializing...",
    LoadingSubtitle = "Client-Sided",
    ConfigurationSaving = { Enabled = false },
    Discord = { Enabled = false },
    KeySystem = false
})

-- Tabs
local PlayerTab = Window:CreateTab("Player")
local VisualTab = Window:CreateTab("Visuals")
local CombatTab = Window:CreateTab("Combat")
local UtilityTab = Window:CreateTab("Utilities")
local FunTab = Window:CreateTab("Fun")
local ExecutorTab = Window:CreateTab("Executor")

-- Variables
local FlyEnabled = false
local FlySpeed = 100
local InfiniteJump = false
local NoClip = false
local TPToPlayerName = ""
local AimbotEnabled = false

-- Helper
local function GetHumanoid()
    return LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
end

-- WalkSpeed/JumpPower (Bypass: just set every Heartbeat)
PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 500},
    Increment = 1,
    CurrentValue = 16,
    Callback = function(val)
        spoofedWalkSpeed = val
    end
})
PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 300},
    Increment = 1,
    CurrentValue = 50,
    Callback = function(val)
        spoofedJumpPower = val
    end
})

-- Infinite Jump
PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(state)
        InfiniteJump = state
    end
})
UserInputService.JumpRequest:Connect(function()
    if InfiniteJump and GetHumanoid() then
        GetHumanoid():ChangeState("Jumping")
    end
end)

-- Fly (no BodyGyro/BodyVelocity hook, just simple CFrame manipulation)
local flyConn
PlayerTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(state)
        FlyEnabled = state
        if state and LocalPlayer.Character then
            local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            flyConn = RunService.Heartbeat:Connect(function()
                if not FlyEnabled or not hrp then return end
                local move = Vector3.new()
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + Camera.CFrame.LookVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move - Camera.CFrame.LookVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move - Camera.CFrame.RightVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + Camera.CFrame.RightVector end
                hrp.Velocity = move * (FlySpeed/5)
            end)
        elseif flyConn then
            flyConn:Disconnect()
        end
    end
})
PlayerTab:CreateSlider({
    Name = "Fly Speed",
    Range = {50, 300},
    Increment = 10,
    CurrentValue = FlySpeed,
    Callback = function(val)
        FlySpeed = val
    end
})

-- NoClip (set CanCollide = false)
local noClipConn
PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Callback = function(state)
        NoClip = state
        if state and not noClipConn then
            noClipConn = RunService.Stepped:Connect(function()
                if LocalPlayer.Character then
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then part.CanCollide = false end
                    end
                end
            end)
        elseif noClipConn then
            noClipConn:Disconnect()
            noClipConn = nil
        end
    end
})

-- Teleport to CFrame
PlayerTab:CreateInput({
    Name = "Teleport to CFrame",
    PlaceholderText = "x,y,z",
    Callback = function(input)
        local parts = string.split(input, ",")
        if #parts == 3 then
            local x, y, z = tonumber(parts[1]), tonumber(parts[2]), tonumber(parts[3])
            if x and y and z then
                local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    hrp.CFrame = CFrame.new(x, y, z)
                end
            end
        end
    end
})

-- Teleport to Player
PlayerTab:CreateInput({
    Name = "Teleport to Player",
    PlaceholderText = "Enter player name",
    Callback = function(name)
        local target = Players:FindFirstChild(name)
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = target.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
            end
        end
    end
})

-- Fullbright
VisualTab:CreateButton({
    Name = "Enable Fullbright",
    Callback = function()
        Lighting.Ambient = Color3.new(1, 1, 1)
        Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
        Lighting.Brightness = 5
    end
})

-- X-Ray
VisualTab:CreateButton({
    Name = "Enable X-Ray (local)",
    Callback = function()
        for _, part in ipairs(Workspace:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0.5
                part.Material = Enum.Material.ForceField
            end
        end
    end
})

-- Tool Giver
UtilityTab:CreateInput({
    Name = "Tool Giver (Asset ID or Backpack Name)",
    PlaceholderText = "123456789 or ToolName",
    Callback = function(toolText)
        if tonumber(toolText) then
            local tool = game:GetObjects("rbxassetid://" .. toolText)[1]
            if tool and tool:IsA("Tool") then
                tool.Parent = LocalPlayer.Backpack
            end
        else
            local tool = LocalPlayer.Backpack:FindFirstChild(toolText)
            if tool then
                tool.Parent = LocalPlayer.Character
            end
        end
    end
})

-- Click Teleport (safe version)
local clickTeleportConn
UtilityTab:CreateToggle({
    Name = "Click Teleport",
    CurrentValue = false,
    Callback = function(state)
        if state and not clickTeleportConn then
            clickTeleportConn = Mouse.Button1Down:Connect(function()
                local target = Mouse.Hit
                if LocalPlayer.Character then
                    local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.CFrame = target + Vector3.new(0, 3, 0)
                    end
                end
            end)
        elseif clickTeleportConn then
            clickTeleportConn:Disconnect()
            clickTeleportConn = nil
        end
    end
})

-- Script Executor
ExecutorTab:CreateInput({
    Name = "Execute Lua Code",
    PlaceholderText = "loadstring(...)()",
    Callback = function(code)
        local success, err = pcall(function()
            loadstring(code)()
        end)
        if not success then
            Rayfield:Notify({ Title = "Error", Content = tostring(err) })
        end
    end
})
ExecutorTab:CreateInput({
    Name = "Load Script from URL",
    PlaceholderText = "Pastebin raw URL",
    Callback = function(url)
        local success, result = pcall(function()
            local script = game:HttpGet(url)
            loadstring(script)()
        end)
        if not success then
            Rayfield:Notify({ Title = "Error", Content = "Failed to load script." })
        end
    end
})

-- Rainbow Character
local rainbowConn
FunTab:CreateToggle({
    Name = "Rainbow Character",
    CurrentValue = false,
    Callback = function(state)
        if state and not rainbowConn then
            rainbowConn = RunService.Heartbeat:Connect(function()
                for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Color = Color3.fromHSV(tick() % 5 / 5, 1, 1)
                    end
                end
            end)
        elseif rainbowConn then
            rainbowConn:Disconnect()
            rainbowConn = nil
        end
    end
})

-- Play Custom Sound
FunTab:CreateInput({
    Name = "Play Sound (ID)",
    PlaceholderText = "Enter Sound ID",
    Callback = function(id)
        local sound = Instance.new("Sound", Camera)
        sound.SoundId = "rbxassetid://" .. id
        sound.Volume = 5
        sound:Play()
        sound.Ended:Connect(function()
            sound:Destroy()
        end)
    end
})

-- Fake Chat
FunTab:CreateInput({
    Name = "Fake Chat",
    PlaceholderText = "Your message...",
    Callback = function(msg)
        local chatEvent = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
        if chatEvent and chatEvent:FindFirstChild("SayMessageRequest") then
            chatEvent.SayMessageRequest:FireServer(msg, "All")
        else
            StarterGui:SetCore("ChatMakeSystemMessage", {
                Text = msg,
                Color = Color3.fromRGB(0, 255, 0),
                Font = Enum.Font.SourceSansBold,
                FontSize = Enum.FontSize.Size24
            })
        end
    end
})

-- Fake System Message
FunTab:CreateInput({
    Name = "Fake System Message",
    PlaceholderText = "Your system notice...",
    Callback = function(text)
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "[SYSTEM] " .. text,
            Color = Color3.fromRGB(255, 200, 0),
            Font = Enum.Font.SourceSansBold,
            FontSize = Enum.FontSize.Size24
        })
    end
})

-- UI Toggle Keybind
UtilityTab:CreateKeybind({
    Name = "Toggle GUI",
    CurrentKeybind = "RightControl",
    HoldToInteract = false,
    Callback = function()
        Rayfield:ToggleUI()
    end
})

-- Clean Up Option
UtilityTab:CreateButton({
    Name = "Unload All",
    Callback = function()
        Rayfield:Destroy()
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "[Admin Panel] Unloaded.",
            Color = Color3.fromRGB(255, 50, 50),
            Font = Enum.Font.SourceSansBold,
            FontSize = Enum.FontSize.Size24
        })
    end
})

-- ======= END =======
