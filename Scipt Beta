-- Ultimate Admin Panel v0.2.3.9
-- Complete fixed script with nil checks and error handling

-- Load RayField Library with error handling
local RayField, Window
local success, err = pcall(function()
    RayField = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)

if not success then
    game:GetService("Players").LocalPlayer:Kick("Failed to load UI Library: "..err)
    return
end

-- Configuration
local Version = "0.2.3.9"
local MinimumWalkSpeed = 1
local MinimumJumpPower = 1

-- Key System Configuration
local KeySystem = {
    Enabled = true,
    Key = "ULTIMATEKEY", -- Change this to your desired key
    KeysToUse = {"Key", "Password", "HWID"}, -- Authentication methods
    NotifyOnWrongKey = true
}

-- Create Window with Key System
Window = RayField:CreateWindow({
    Name = "Ultimate Admin Panel v"..Version,
    LoadingTitle = "Loading Admin Panel...",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "UltimateAdmin",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = KeySystem.Enabled,
    Key = KeySystem.Key,
    KeysToUse = KeySystem.KeysToUse
})

-- Check if Window was created successfully
if not Window then
    game:GetService("Players").LocalPlayer:Kick("Failed to create window")
    return
end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- Safe character initialization
local Character, Humanoid, RootPart
local function InitializeCharacter()
    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    Humanoid = Character:WaitForChild("Humanoid")
    RootPart = Character:WaitForChild("HumanoidRootPart")
end

-- Create tabs with nil checks
local MainTab, MovementTab, ESPTab, AimbotTab, ShootingTab

local function CreateTabs()
    -- Main Tab
    MainTab = Window:CreateTab("Main", 4483362458)
    if not MainTab then return false end
    
    -- Movement Tab
    MovementTab = Window:CreateTab("Movement", 4483362458)
    if not MovementTab then return false end
    
    -- ESP Tab
    ESPTab = Window:CreateTab("ESP", 4483362458)
    if not ESPTab then return false end
    
    -- Aimbot Tab
    AimbotTab = Window:CreateTab("Aimbot", 4483362458)
    if not AimbotTab then return false end
    
    -- Shooting Tab
    ShootingTab = Window:CreateTab("Shooting", 4483362458)
    if not ShootingTab then return false end
    
    return true
end

-- Attempt to create tabs with error handling
local tabsCreated = pcall(CreateTabs)
if not tabsCreated then
    RayField:Notify({
        Title = "Error",
        Content = "Failed to create tabs",
        Duration = 6.5,
        Image = 4483362458
    })
    return
end

-- Auto-update character references with error handling
local function SafeCharacterUpdate(newChar)
    pcall(function()
        Character = newChar
        Humanoid = newChar:WaitForChild("Humanoid", 5) or error("Humanoid not found")
        RootPart = newChar:WaitForChild("HumanoidRootPart", 5) or error("RootPart not found")
    end)
end

LocalPlayer.CharacterAdded:Connect(SafeCharacterUpdate)

-- Initialize character safely
pcall(InitializeCharacter)

-- Anti-detection with better protection
local function SetupAntiDetection()
    pcall(function() 
        game:GetService("ScriptContext").ScriptsDisabled = false 
    end)
    
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        if method:lower() == "kick" then 
            return nil 
        end
        return oldNamecall(self, ...)
    end)
end

SetupAntiDetection()

-- Admin states with safe defaults
local Admin = {
    AllEnabled = false,
    Movement = {
        WalkSpeed = {
            Enabled = false,
            Value = 16,
            Max = 200,
            Min = MinimumWalkSpeed
        },
        JumpPower = {
            Enabled = false,
            Value = 50,
            Max = 500,
            Min = MinimumJumpPower
        },
        AutoJump = {
            Enabled = false,
            Interval = 0.5
        }
    },
    ESP = {
        Enabled = false,
        Players = {},
        ShowInfo = true,
        ShowHealth = true,
        ShowDistance = true,
        ShowLine = true,
        ShowBox = true,
        TeamCheck = false,
        MaxDistance = 1000
    },
    Aimbot = {
        Enabled = false,
        FOV = 100,
        Smoothness = 0.2,
        TargetPart = "Head",
        VisibilityCheck = true,
        TeamCheck = false,
        Prediction = {
            Enabled = false,
            VelocityMultiplier = 0.1
        },
        Target = nil,
        FOVCircle = nil
    },
    Shooting = {
        Enabled = false,
        NoRecoil = true,
        NoSpread = true,
        InstantHit = true,
        RapidFire = false,
        InfiniteAmmo = false,
        BulletRedirection = false
    }
}

-- Enhanced Aimbot with better target selection
local function CreateFOVCircle()
    if Admin.Aimbot.FOVCircle then 
        Admin.Aimbot.FOVCircle:Remove()
        Admin.Aimbot.FOVCircle = nil
    end
    
    local circle = Drawing.new("Circle")
    circle.Visible = Admin.Aimbot.Enabled
    circle.Thickness = 2
    circle.Color = Color3.fromRGB(255, 255, 255)
    circle.Transparency = 0.7
    circle.Filled = false
    circle.Radius = Admin.Aimbot.FOV
    circle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
    
    Admin.Aimbot.FOVCircle = circle
    return circle
end

local function FindBestTarget()
    if not Character or not RootPart then return nil end
    
    local closest = nil
    local closestDist = math.huge
    local fov = Admin.Aimbot.FOV
    local mousePos = UserInputService:GetMouseLocation()
    local localTeam = LocalPlayer.Team
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player == LocalPlayer then continue end
        if Admin.Aimbot.TeamCheck and player.Team == localTeam then continue end
        
        local char = player.Character
        if not char then continue end
        
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if not humanoid or humanoid.Health <= 0 then continue end
        
        local targetPart = char:FindFirstChild(Admin.Aimbot.TargetPart)
        if not targetPart then continue end
        
        -- Distance check
        local distance = (targetPart.Position - RootPart.Position).Magnitude
        if distance > Admin.ESP.MaxDistance then continue end
        
        -- Visibility check
        if Admin.Aimbot.VisibilityCheck then
            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {Character, char}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            
            local rayOrigin = Camera.CFrame.Position
            local rayDirection = (targetPart.Position - rayOrigin).Unit * 1000
            local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
            
            if raycastResult and raycastResult.Instance:FindFirstAncestor(player.Name) ~= char then
                continue
            end
        end
        
        local screenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
        if onScreen then
            local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mousePos.X, mousePos.Y)).Magnitude
            
            if dist < fov and dist < closestDist then
                closest = player
                closestDist = dist
            end
        end
    end
    
    Admin.Aimbot.Target = closest
    return closest
end

local function PredictPosition(targetPart)
    if not Admin.Aimbot.Prediction.Enabled or not targetPart then 
        return targetPart.Position 
    end
    
    local velocity = targetPart.Velocity * Admin.Aimbot.Prediction.VelocityMultiplier
    return targetPart.Position + velocity
end

-- Movement Functions with safe checks
local function UpdateMovement()
    if not Humanoid then return end
    
    if Admin.Movement.WalkSpeed.Enabled then
        Humanoid.WalkSpeed = math.clamp(Admin.Movement.WalkSpeed.Value, Admin.Movement.WalkSpeed.Min, Admin.Movement.WalkSpeed.Max)
    else
        Humanoid.WalkSpeed = 16
    end
    
    if Admin.Movement.JumpPower.Enabled then
        Humanoid.JumpPower = math.clamp(Admin.Movement.JumpPower.Value, Admin.Movement.JumpPower.Min, Admin.Movement.JumpPower.Max)
    else
        Humanoid.JumpPower = 50
    end
end

local autoJumpConn
local function HandleAutoJump()
    if autoJumpConn then 
        autoJumpConn:Disconnect() 
        autoJumpConn = nil
    end
    
    if Admin.Movement.AutoJump.Enabled and Humanoid then
        autoJumpConn = RunService.Heartbeat:Connect(function()
            if Humanoid and Humanoid.FloorMaterial ~= Enum.Material.Air then
                pcall(function()
                    Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait(Admin.Movement.AutoJump.Interval)
                end)
            end
        end)
    end
end

-- ESP Functions with cleanup
local function UpdateESP()
    if not RootPart then return end
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player == LocalPlayer then continue end
        if Admin.ESP.TeamCheck and player.Team == LocalPlayer.Team then continue end
        
        local char = player.Character
        if not char then 
            if Admin.ESP.Players[player] then
                for _, element in pairs(Admin.ESP.Players[player]) do
                    pcall(function() element:Destroy() end)
                end
                Admin.ESP.Players[player] = nil
            end
            continue 
        end
        
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if not humanoid or humanoid.Health <= 0 then continue end
        
        local root = char:FindFirstChild("HumanoidRootPart")
        if not root then continue end
        
        -- Distance check
        local distance = (root.Position - RootPart.Position).Magnitude
        if distance > Admin.ESP.MaxDistance then
            if Admin.ESP.Players[player] then
                for _, element in pairs(Admin.ESP.Players[player]) do
                    pcall(function() element.Visible = false end)
                end
            end
            continue
        end
        
        if not Admin.ESP.Players[player] then
            Admin.ESP.Players[player] = {
                Highlight = Instance.new("Highlight"),
                Billboard = Instance.new("BillboardGui"),
                NameLabel = Instance.new("TextLabel"),
                HealthLabel = Instance.new("TextLabel"),
                DistanceLabel = Instance.new("TextLabel"),
                Line = Instance.new("LineHandleAdornment"),
                Box = Instance.new("BoxHandleAdornment")
            }
            
            local esp = Admin.ESP.Players[player]
            
            -- Highlight setup
            esp.Highlight.FillColor = Color3.fromRGB(255, 50, 50)
            esp.Highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
            esp.Highlight.Parent = char
            
            -- Billboard setup
            esp.Billboard.Size = UDim2.new(0, 200, 0, 100)
            esp.Billboard.StudsOffset = Vector3.new(0, 2, 0)
            esp.Billboard.AlwaysOnTop = true
            esp.Billboard.Parent = char
            
            -- Name label
            esp.NameLabel.Size = UDim2.new(1, 0, 0.3, 0)
            esp.NameLabel.Position = UDim2.new(0, 0, 0, 0)
            esp.NameLabel.Text = player.Name
            esp.NameLabel.TextColor3 = Color3.new(1, 1, 1)
            esp.NameLabel.BackgroundTransparency = 1
            esp.NameLabel.Parent = esp.Billboard
            
            -- Health label
            esp.HealthLabel.Size = UDim2.new(1, 0, 0.3, 0)
            esp.HealthLabel.Position = UDim2.new(0, 0, 0.3, 0)
            esp.HealthLabel.TextColor3 = Color3.new(1, 1, 1)
            esp.HealthLabel.BackgroundTransparency = 1
            esp.HealthLabel.Parent = esp.Billboard
            
            -- Distance label
            esp.DistanceLabel.Size = UDim2.new(1, 0, 0.3, 0)
            esp.DistanceLabel.Position = UDim2.new(0, 0, 0.6, 0)
            esp.DistanceLabel.TextColor3 = Color3.new(1, 1, 1)
            esp.DistanceLabel.BackgroundTransparency = 1
            esp.DistanceLabel.Parent = esp.Billboard
            
            -- Line setup
            esp.Line.Thickness = 1
            esp.Line.Color3 = Color3.fromRGB(255, 50, 50)
            esp.Line.Adornee = workspace.Terrain
            esp.Line.Parent = workspace.Terrain
            
            -- Box setup
            esp.Box.Adornee = root
            esp.Box.Size = Vector3.new(2, 4, 1)
            esp.Box.Color3 = Color3.fromRGB(255, 50, 50)
            esp.Box.Transparency = 0.7
            esp.Box.ZIndex = 1
            esp.Box.Parent = char
        end
        
        local esp = Admin.ESP.Players[player]
        local root = char:FindFirstChild("HumanoidRootPart")
        
        if not root then continue end
        
        esp.Highlight.Enabled = Admin.ESP.Enabled
        esp.Billboard.Enabled = Admin.ESP.Enabled and Admin.ESP.ShowInfo
        esp.Line.Visible = Admin.ESP.Enabled and Admin.ESP.ShowLine
        esp.Box.Visible = Admin.ESP.Enabled and Admin.ESP.ShowBox
        
        if Admin.ESP.Enabled then
            -- Update line
            if Admin.ESP.ShowLine then
                esp.Line.Length = (root.Position - RootPart.Position).Magnitude
                esp.Line.CFrame = CFrame.new(root.Position, RootPart.Position)
            end
            
            -- Update info
            if Admin.ESP.ShowInfo and humanoid then
                esp.HealthLabel.Text = string.format("HP: %d/%d", math.floor(humanoid.Health), math.floor(humanoid.MaxHealth))
                esp.DistanceLabel.Text = string.format("%.1fm", (root.Position - RootPart.Position).Magnitude)
                
                -- Color based on health
                local healthPercent = humanoid.Health / humanoid.MaxHealth
                esp.HealthLabel.TextColor3 = Color3.new(1, healthPercent, healthPercent)
                esp.Highlight.FillColor = Color3.new(1, healthPercent, healthPercent)
            end
        end
    end
end

-- Cleanup ESP when disabled
local function CleanupESP()
    for player, esp in pairs(Admin.ESP.Players) do
        for _, element in pairs(esp) do
            pcall(function() element:Destroy() end)
        end
    end
    Admin.ESP.Players = {}
end

-- Main game loop with error handling
local function MainLoop()
    pcall(function()
        -- Update movement
        UpdateMovement()
        
        -- Update ESP
        if Admin.ESP.Enabled then
            UpdateESP()
        else
            CleanupESP()
        end
        
        -- Update Aimbot
        if Admin.Aimbot.Enabled then
            if not Admin.Aimbot.FOVCircle then
                CreateFOVCircle()
            else
                Admin.Aimbot.FOVCircle.Visible = true
                Admin.Aimbot.FOVCircle.Radius = Admin.Aimbot.FOV
            end
            
            local target = FindBestTarget()
            if target and target.Character then
                local targetPart = target.Character:FindFirstChild(Admin.Aimbot.TargetPart)
                if targetPart then
                    local targetPos = PredictPosition(targetPart)
                    local current = Camera.CFrame
                    local new = current:Lerp(CFrame.lookAt(current.Position, targetPos), Admin.Aimbot.Smoothness)
                    Camera.CFrame = new
                end
            end
        elseif Admin.Aimbot.FOVCircle then
            Admin.Aimbot.FOVCircle.Visible = false
        end
    end)
end

-- Create UI elements with nil checks
if MainTab then
    MainTab:CreateToggle({
        Name = "Master Toggle",
        CurrentValue = false,
        Flag = "MasterToggle",
        Callback = function(Value)
            Admin.AllEnabled = Value
            Admin.Movement.WalkSpeed.Enabled = Value
            Admin.Movement.JumpPower.Enabled = Value
            Admin.ESP.Enabled = Value
            Admin.Aimbot.Enabled = Value
            Admin.Shooting.Enabled = Value
            UpdateMovement()
            HandleAutoJump()
        end,
    })
end

if MovementTab then
    MovementTab:CreateSlider({
        Name = "Walk Speed",
        Range = {MinimumWalkSpeed, 200},
        Increment = 1,
        Suffix = "studs",
        CurrentValue = 16,
        Flag = "WalkSpeed",
        Callback = function(Value)
            Admin.Movement.WalkSpeed.Value = Value
            if Admin.Movement.WalkSpeed.Enabled then
                Humanoid.WalkSpeed = math.clamp(Value, MinimumWalkSpeed, Admin.Movement.WalkSpeed.Max)
            end
        end,
    })

    MovementTab:CreateToggle({
        Name = "Enable Walk Speed",
        CurrentValue = false,
        Flag = "WalkSpeedToggle",
        Callback = function(Value)
            Admin.Movement.WalkSpeed.Enabled = Value
            Humanoid.WalkSpeed = Value and math.clamp(Admin.Movement.WalkSpeed.Value, MinimumWalkSpeed, Admin.Movement.WalkSpeed.Max) or 16
        end,
    })

    MovementTab:CreateSlider({
        Name = "Jump Power",
        Range = {MinimumJumpPower, 500},
        Increment = 5,
        Suffix = "power",
        CurrentValue = 50,
        Flag = "JumpPower",
        Callback = function(Value)
            Admin.Movement.JumpPower.Value = Value
            if Admin.Movement.JumpPower.Enabled then
                Humanoid.JumpPower = math.clamp(Value, MinimumJumpPower, Admin.Movement.JumpPower.Max)
            end
        end,
    })

    MovementTab:CreateToggle({
        Name = "Enable Jump Power",
        CurrentValue = false,
        Flag = "JumpPowerToggle",
        Callback = function(Value)
            Admin.Movement.JumpPower.Enabled = Value
            Humanoid.JumpPower = Value and math.clamp(Admin.Movement.JumpPower.Value, MinimumJumpPower, Admin.Movement.JumpPower.Max) or 50
        end,
    })

    MovementTab:CreateToggle({
        Name = "Auto Jump",
        CurrentValue = false,
        Flag = "AutoJump",
        Callback = function(Value)
            Admin.Movement.AutoJump.Enabled = Value
            HandleAutoJump()
        end,
    })

    MovementTab:CreateSlider({
        Name = "Jump Interval",
        Range = {0.1, 2},
        Increment = 0.1,
        Suffix = "seconds",
        CurrentValue = 0.5,
        Flag = "JumpInterval",
        Callback = function(Value)
            Admin.Movement.AutoJump.Interval = Value
        end,
    })
end

if ESPTab then
    ESPTab:CreateToggle({
        Name = "Enable ESP",
        CurrentValue = false,
        Flag = "ESPToggle",
        Callback = function(Value)
            Admin.ESP.Enabled = Value
            if not Value then
                CleanupESP()
            end
        end,
    })

    ESPTab:CreateToggle({
        Name = "Show Info",
        CurrentValue = true,
        Flag = "ESPInfo",
        Callback = function(Value)
            Admin.ESP.ShowInfo = Value
        end,
    })

    ESPTab:CreateToggle({
        Name = "Show Health",
        CurrentValue = true,
        Flag = "ESPHealth",
        Callback = function(Value)
            Admin.ESP.ShowHealth = Value
        end,
    })

    ESPTab:CreateToggle({
        Name = "Show Distance",
        CurrentValue = true,
        Flag = "ESPDistance",
        Callback = function(Value)
            Admin.ESP.ShowDistance = Value
        end,
    })

    ESPTab:CreateToggle({
      Name = "Show Line",
      CurrentValue = true
      Flag = "ESPLine",
      Callback = function(Value)
            Admin.ESP.ShowLine = Value
        end,
    })

    ESPTab:CreateToggle({
        Name = "Show Box",
        CurrentValue = true,
        Flag = "ESPBox",
        Callback = function(Value)
            Admin.ESP.ShowBox = Value
        end,
    })

    ESPTab:CreateToggle({
        Name = "Team Check",
        CurrentValue = false,
        Flag = "ESPTeamCheck",
        Callback = function(Value)
            Admin.ESP.TeamCheck = Value
        end,
    })

    ESPTab:CreateSlider({
        Name = "Max ESP Distance",
        Range = {50, 2000},
        Increment = 50,
        Suffix = "studs",
        CurrentValue = 1000,
        Flag = "ESPMaxDistance",
        Callback = function(Value)
            Admin.ESP.MaxDistance = Value
        end,
    })
end

if AimbotTab then
    AimbotTab:CreateToggle({
        Name = "Enable Aimbot",
        CurrentValue = false,
        Flag = "AimbotToggle",
        Callback = function(Value)
            Admin.Aimbot.Enabled = Value
            if Value and not Admin.Aimbot.FOVCircle then
                CreateFOVCircle()
            end
        end,
    })

    AimbotTab:CreateSlider({
        Name = "Aimbot FOV",
        Range = {10, 500},
        Increment = 5,
        Suffix = "radius",
        CurrentValue = 100,
        Flag = "AimbotFOV",
        Callback = function(Value)
            Admin.Aimbot.FOV = Value
            if Admin.Aimbot.FOVCircle then
                Admin.Aimbot.FOVCircle.Radius = Value
            end
        end,
    })

    AimbotTab:CreateSlider({
        Name = "Smoothness",
        Range = {0.01, 1},
        Increment = 0.01,
        Suffix = "smooth",
        CurrentValue = 0.2,
        Flag = "AimbotSmooth",
        Callback = function(Value)
            Admin.Aimbot.Smoothness = Value
        end,
    })

    AimbotTab:CreateDropdown({
        Name = "Target Part",
        Options = {"Head", "HumanoidRootPart", "UpperTorso"},
        CurrentOption = "Head",
        Flag = "AimbotPart",
        Callback = function(Option)
            Admin.Aimbot.TargetPart = Option
        end,
    })

    AimbotTab:CreateToggle({
        Name = "Visibility Check",
        CurrentValue = true,
        Flag = "AimbotVisCheck",
        Callback = function(Value)
            Admin.Aimbot.VisibilityCheck = Value
        end,
    })

    AimbotTab:CreateToggle({
        Name = "Team Check",
        CurrentValue = false,
        Flag = "AimbotTeamCheck",
        Callback = function(Value)
            Admin.Aimbot.TeamCheck = Value
        end,
    })

    AimbotTab:CreateToggle({
        Name = "Prediction",
        CurrentValue = false,
        Flag = "AimbotPrediction",
        Callback = function(Value)
            Admin.Aimbot.Prediction.Enabled = Value
        end,
    })

    AimbotTab:CreateSlider({
        Name = "Prediction Strength",
        Range = {0, 0.5},
        Increment = 0.01,
        Suffix = "multiplier",
        CurrentValue = 0.1,
        Flag = "AimbotPredStr",
        Callback = function(Value)
            Admin.Aimbot.Prediction.VelocityMultiplier = Value
        end,
    })
end

if ShootingTab then
    ShootingTab:CreateToggle({
        Name = "Enable Shooting",
        CurrentValue = false,
        Flag = "ShootingToggle",
        Callback = function(Value)
            Admin.Shooting.Enabled = Value
        end,
    })

    ShootingTab:CreateToggle({
        Name = "No Recoil",
        CurrentValue = true,
        Flag = "NoRecoil",
        Callback = function(Value)
            Admin.Shooting.NoRecoil = Value
        end,
    })

    ShootingTab:CreateToggle({
        Name = "No Spread",
        CurrentValue = true,
        Flag = "NoSpread",
        Callback = function(Value)
            Admin.Shooting.NoSpread = Value
        end,
    })

    ShootingTab:CreateToggle({
        Name = "Instant Hit",
        CurrentValue = true,
        Flag = "InstantHit",
        Callback = function(Value)
            Admin.Shooting.InstantHit = Value
        end,
    })

    ShootingTab:CreateToggle({
        Name = "Rapid Fire",
        CurrentValue = false,
        Flag = "RapidFire",
        Callback = function(Value)
            Admin.Shooting.RapidFire = Value
        end,
    })

    ShootingTab:CreateToggle({
        Name = "Infinite Ammo",
        CurrentValue = false,
        Flag = "InfiniteAmmo",
        Callback = function(Value)
            Admin.Shooting.InfiniteAmmo = Value
        end,
    })

    ShootingTab:CreateToggle({
        Name = "Bullet Redirection",
        CurrentValue = false,
        Flag = "BulletRedirect",
        Callback = function(Value)
            Admin.Shooting.BulletRedirection = Value
        end,
    })
end

-- Watermark
RayField:SetWatermark("Ultimate Admin Panel v"..Version)

-- Start main loop
RunService.Heartbeat:Connect(MainLoop)

-- Auto cleanup on player death or leaving
LocalPlayer.CharacterAdded:Connect(function()
    -- Re-initialize character references
    pcall(InitializeCharacter)
end)

LocalPlayer.CharacterRemoving:Connect(function()
    CleanupESP()
    if Admin.Aimbot.FOVCircle then
        Admin.Aimbot.FOVCircle:Remove()
        Admin.Aimbot.FOVCircle = nil
    end
end)

game:GetService("CoreGui").ChildRemoved:Connect(function(child)
    if child.Name == "Ultimate Admin Panel" then
        CleanupESP()
        if Admin.Aimbot.FOVCircle then
            Admin.Aimbot.FOVCircle:Remove()
            Admin.Aimbot.FOVCircle = nil
        end
    end
end)

-- Initialization complete
RayField:Notify({
    Title = "Admin Panel Loaded",
    Content = "Version "..Version.." is ready!",
    Duration = 3,
    Image = 4483362458
})
